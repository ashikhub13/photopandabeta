apply plugin: 'com.android.application'
apply plugin: 'android-apt'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.2"

    defaultConfig {
        applicationId "com.example.ashik.photopandabeta"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        renderscriptTargetApi 21
        renderscriptSupportModeEnabled true
        ndk {
            moduleName "ndkTest"
        }
        multiDexEnabled true

    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }
    sourceSets.main.jni.srcDirs = [] // disable automatic ndk-build call, which ignore our Android.mk
    sourceSets.main.jniLibs.srcDir 'src/main/libs'

    // call regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec) {
        workingDir file('src/main')
        commandLine getNdkBuildCmd()
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    task cleanNative(type: Exec) {
        workingDir file('src/main')
        commandLine getNdkBuildCmd(), 'clean'
    }

    clean.dependsOn cleanNative

}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    apt 'com.github.hotchemi:permissionsdispatcher-processor:2.1.3'
    compile 'com.android.support:appcompat-v7:24.2.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.github.hotchemi:permissionsdispatcher:2.1.3'
    compile 'com.android.support:design:24.0.0'
    compile 'com.android.support:support-v4:24.0.0'
    compile 'com.android.support:support-annotations:24.0.0'
    compile 'com.malinskiy:superrecyclerview:1.1.4'

}
def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new RuntimeException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    return ndkdir
}
def getNdkBuildCmd() {

    def localProperties = new Properties()
    localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = localProperties.getProperty('ndk.dir')
    def ndkBuildPrefix = ndkDir != null ? ndkDir + '/' : '';



    def ndkbuild = getNdkDir() + "/ndk-build"
    if (ant.properties.os == 'windows')
        ndkbuild += ".cmd"

    return ndkbuild

}
